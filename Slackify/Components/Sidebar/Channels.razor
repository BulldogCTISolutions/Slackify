@inject NavigationManager navigationManager;

@implements IAsyncDisposable;

<AuthorizeView>
    <div>
        <ul>
            <li class="py-2 pl-4 cursor-pointer">
                <div class="flex w-full">
                    <span class="iconify text-white font-semibold mr-1 mt-1" data-icon="ant-design:caret-down" data-width="18"></span>
                    <h2 class="text-white text-base">Channels</h2>
                </div>
            </li>
        </ul>

        <ul>
            <li class="py-2 pl-4 cursor-pointer">
                <div class="flex w-full">
                    <span class="iconify text-white font-semibold mr-1 mt-1" data-icon="akar-icons:plus" data-width="18"></span>
                    <h2 class="text-white text-base">Add Channel</h2>
                </div>
            </li>
        </ul>

        <ul>
            <li class="py-2 pl-4 cursor-pointer">
                <div class="flex w-full">
                    <span class="iconify text-white font-semibold mr-1 mt-1" data-icon="ph:hash" data-width="18"></span>
                    <h2 class="text-white text-base">design team</h2>
                </div>
            </li>
        </ul>

        <ul>
            <li class="py-2 pl-4 cursor-pointer">
                <div class="flex w-full">
                    <span class="iconify text-white font-semibold mr-1 mt-1" data-icon="ph:hash" data-width="18"></span>
                    <h2 class="text-white text-base">blazor-engineering</h2>
                </div>
            </li>
        </ul>

        <ul>
            <li class="py-2 pl-4 cursor-pointer">
                <div class="flex w-full">
                    <span class="iconify text-white font-semibold mr-1 mt-1" data-icon="ant-design:caret-down" data-width="18"></span>
                    <h2 class="text-white text-base">Direct Messages</h2>
                </div>
            </li>
        </ul>

        <ul>
            @foreach( UsersForListing user in _previousChatUserList )
            {
                string userURL = $"/client/DM-{user.Email}-{user.UserId}-{user.UserName}";
                <li class="py-2 pl-4 cursor-pointer hover:bg-neutral-900/50">
                    <NavLink class="iconify flex text-white" href="@userURL">
                        <span class="iconify text-white font-semibold mr-2 mt-1" data-icon="carbon:user-online" data-width="20"></span>
                        @user.UserName
                    </NavLink>
                </li>
            }
        </ul>

    </div>
</AuthorizeView>

@code
{
    private HubConnection _hubConnection;
    private ICollection<UsersForListing> _previousChatUserList = new List<UsersForListing>();

    [Inject]
    public CookiesProvider cookiesProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CookieContainer cookieContainer = new CookieContainer();
        Cookie cookie = new Cookie()
        {
            Name = "SlackifyAuthenticationCookie",
            Domain = "localhost",
            Value = cookiesProvider.Cookie
        };

        cookieContainer.Add( cookie );

        if( cookiesProvider.Cookie == null )
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl( navigationManager.ToAbsoluteUri( "/chat" ) )
                .Build();
        }
        else
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl( navigationManager.ToAbsoluteUri( "/chat" ), option => option.Cookies = cookieContainer )
                .Build();
        }

        _hubConnection.On<List<string>>( "ReceiveInitializeUsersList", ( list ) =>
        {
            foreach( string user in list )
            {
                string[] dataArray = user.Split( "-" );
                string userEmail = dataArray[0];
                string userName = dataArray[1];
                int userId = Convert.ToInt32( dataArray[2] );//   TODO:  Use TryParse?

                if( this._previousChatUserList.Any( u => u.Email == userEmail ) == false ) //   TODO: Use string.Equals()
                {
                    this._previousChatUserList.Add( new UsersForListing
                        {
                            Email = userEmail,
                            UserName = userName,
                            UserId = userId
                        } );
                }
            }

            InvokeAsync( () => StateHasChanged() );
        } );

        _hubConnection.On<string>( "UserDisconnected", email =>
        {
            var user = this._previousChatUserList.Where( user => user.Email == email ).SingleOrDefault();

            this._previousChatUserList.Remove( user );

            InvokeAsync( () => StateHasChanged() );
        } );

        await _hubConnection.StartAsync();
        await _hubConnection.InvokeAsync( "InitializeUserList" );
    }

    public async ValueTask DisposeAsync()
    {
        if( _hubConnection is not null )
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
